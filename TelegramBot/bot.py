from collections import defaultdict
from pathlib import Path
import logging
import requests
import time
import datetime

import telegram
from telegram import (
    ReplyKeyboardRemove,
    Update,
    ParseMode,
)
from telegram.ext import (
    CallbackContext,
    CommandHandler,
    ConversationHandler,
    Filters,
    MessageHandler,
    Updater,
)
from telegram.ext.callbackqueryhandler import CallbackQueryHandler

# from utils import TgLogger
from utils.inline_keyboard import *
from messages import Messages

TOKEN = Path(".secrets/bot_token.txt").read_text()
MESSAGES = Messages()
HOST = "http://carolyn-spreadsheets:5000"
SUB_TIME_DELTA = datetime.timedelta(minutes=15)

BROADCAST_MESSAGE, BROADCAST_PUBLISH_DONE = range(2)
GRADES_ASSNT, GRADES_VIEW = range(2)

# logging.setLoggerClass(TgLogger)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
LOG = logging.getLogger(__name__)

# ================================================================ BOT COMMANDS


def start(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫ –∫–æ–º–∞–Ω–¥–µ /start)"""

    user_id = update.message.from_user.id
    username = update.message.from_user.username
    student_token = context.args[0] if len(context.args) > 0 else None

    if student_token is None:
        update.message.reply_markdown_v2(text=MESSAGES.Auth.NO_AUTH)
        return

    # –î–ª–∏–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, —Å–æ–æ–±—â–∏–º –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.
    update.message.reply_text(text=MESSAGES.Auth.START)

    LOG.info(f"Authenticanting {user_id}")

    try:
        req = requests.get(
            f"{HOST}/auth",
            params={"token": student_token, "tg_id": user_id},
        )
        data = req.json()
    except requests.exceptions.RequestException:
        LOG.exception("@{username} –≤—ã–∑–≤–∞–ª: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É Spreadsheets.")
        update.message.reply_sticker(MESSAGES.Stickers.DEAD)
        return

    if req.status_code != 200:
        LOG.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} {data}")
        err = data.get("error", "")
        update.message.reply_text(text=MESSAGES.Auth.failure(err))
        update.message.reply_sticker(MESSAGES.Stickers.DEAD)
        return

    update.message.reply_text(
        text=MESSAGES.Auth.hello(data["student"]),
    )


def grades_start(update: Update, context: CallbackContext):
    """–°–æ–æ–±—â–µ–Ω–∏–µ '–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É'.

    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.
    """
    user_id = update.message.from_user.id
    start = time.monotonic()
    # –î–ª–∏–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, —Å–æ–æ–±—â–∏–º –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.
    look_msg = update.message.reply_html(MESSAGES.Assignments.START)

    try:
        data = requests.get(f"{HOST}/grades", params={"tg_id": user_id}).json()
    except:
        LOG.exception("Failed to get grades.")
        update.message.reply_sticker(MESSAGES.Stickers.DEAD)
        return ConversationHandler.END

    context.user_data["subjects"] = data["subjects"]
    context.user_data["assignments"] = data["assignments"]
    diff = time.monotonic() - start
    look_msg.edit_text(MESSAGES.Assignments.timeit(diff))
    update.message.reply_text(
        MESSAGES.Assignments.SELECT_COURSE,
        reply_markup=build_menu_of_subjects(data["subjects"]),
    )
    return GRADES_ASSNT


def grades_pick_assignment(update: Update, context: CallbackContext):
    """–°–æ–æ–±—â–µ–Ω–∏–µ '–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞–Ω–∏–µ'.

    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.
    –í `callback_query` —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞, –ª–∏–±–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.
    –ú–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.
    """
    query = update.callback_query
    query.answer()
    if query.data == "cancel":
        query.edit_message_text(MESSAGES.Assignments.END, reply_markup=None)
        return ConversationHandler.END
    context.user_data["selected_subject"] = query.data
    assignments = [
        a for a in context.user_data["assignments"] if a["subject"] == query.data
    ]
    query.edit_message_text(
        MESSAGES.Assignments.SELECT_ASSNT,
        reply_markup=build_menu_of_assignments(assignments, has_back_button=True),
    )
    return GRADES_VIEW


def grades_view(update: Update, context: CallbackContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–º–∞—à–∫–∏.

    –í `callback_query` —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è UUID, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–∏—è. –õ–∏–±–æ –∫–æ–º–∞–Ω–¥–∞:
    cancel –∏–ª–∏ back. –ú–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥.
    """
    query = update.callback_query
    query.answer()

    if query.data == "cancel":
        query.edit_message_text(MESSAGES.Assignments.END, reply_markup=None)
        return ConversationHandler.END

    if query.data == "back":
        subjects = context.user_data["subjects"]
        query.edit_message_text(
            MESSAGES.Assignments.SELECT_COURSE,
            reply_markup=build_menu_of_subjects(subjects),
        )
        return GRADES_ASSNT

    assignments_map = {a["uuid"]: a for a in context.user_data["assignments"]}
    assignment = assignments_map[query.data]
    subject = context.user_data["selected_subject"]

    raw_menu = build_menu(
        [
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"),
            InlineKeyboardButton("‚èÆ –ù–∞–∑–∞–¥", callback_data=subject),
        ],
        2,
    )

    reply_markup = InlineKeyboardMarkup(raw_menu)

    query.edit_message_text(
        text=MESSAGES.Assignments.get(
            assignment["name"],
            assignment["points"],
            assignment["how_to_display"],
            assignment["notes"],
        ),
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup,
    )

    return GRADES_ASSNT


def broadcast(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞: —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º."""
    access_message = update.message.reply_text("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...")
    user_id = update.message.from_user.id
    try:
        r = requests.get(f"{HOST}/students", params={"tg_id": user_id})
        assert r.status_code == 200, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –∫ /broadcast"
        data = r.json()
        context.bot_data["groups"] = data
        access_message.edit_text(f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—É—á–µ–Ω")

        groups_list = [k for k in data.keys()]
        n = 5  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
        summary_keyboard = []
        LOG.info(groups_list)
        for i in range((len(groups_list) // n) + 1):
            LOG.debug(groups_list[i * n : i * n + n])
            keyboard_row = groups_list[i * n : i * n + n]
            summary_keyboard.append(keyboard_row)

        LOG.info(f"{summary_keyboard}")
        reply_keyboard = telegram.ReplyKeyboardMarkup(
            summary_keyboard,
            one_time_keyboard=True,
        )
        update.message.reply_text("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É", reply_markup=reply_keyboard)
        return BROADCAST_MESSAGE
    except:
        access_message.edit_text("ü§ö –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        LOG.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—Ä–æ–¥–∫–∞—Å—Ç.")
        return ConversationHandler.END


def publish_message(update: Update, context: CallbackContext):
    """–ß–µ–ª –≤—ã–±–∏—Ä–∞–µ—Ç –≥—Ä—É–ø–ø—É –∏ –¥–ª—è –Ω–µ–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    message = update.message.text
    context.user_data["broadcast_to"] = message
    update.message.reply_html(
        f"üñã –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {message}:",
        reply_markup=telegram.ReplyKeyboardRemove(),
    )
    return BROADCAST_PUBLISH_DONE


def publish_done(update: Update, context: CallbackContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–¥–µ—Å—å."""
    message = f"üì£ {update.message.text}\n<i>‚Äî {update.message.from_user.name}</i>"
    group = context.user_data["broadcast_to"]
    send_status = update.message.reply_text("0%")
    students = context.bot_data["groups"][group]["students"]
    for i, student in enumerate(students):
        progress = i / len(students) * 100
        if student["tg_id"]:
            context.bot.send_message(
                chat_id=student["tg_id"], text=message, parse_mode="HTML"
            )
        send_status.edit_text(f"{progress:.1f}% üèÉ‚Äç‚ôÇÔ∏è –†–∞—Å—Å—ã–ª–∫–∞")
    send_status.edit_text("100% üëç –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã")
    return ConversationHandler.END


def cancel(update: Update, context: CallbackContext):
    """Cancels and ends the conversation."""
    update.message.reply_text("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


def sub(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫ –∫–æ–º–∞–Ω–¥–µ /start)"""

    user_id = update.message.from_user.id
    username = update.message.from_user.username

    # –î–ª–∏–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, —Å–æ–æ–±—â–∏–º –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.
    msg = update.message.reply_text(text=MESSAGES.Sub.START)

    try:
        req = requests.get(
            f"{HOST}/sub",
            params={"tg_id": user_id},
        )
        data = req.json()
    except requests.exceptions.RequestException:
        LOG.exception("@{user_id} –≤—ã–∑–≤–∞–ª: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É Spreadsheets.")
        update.message.reply_sticker(MESSAGES.Stickers.DEAD)
        return

    if req.status_code != 200:
        LOG.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} {data}")
        err = data.get("error", "")
        update.message.reply_text(text=MESSAGES.Sub.failure(err))
        update.message.reply_sticker(MESSAGES.Stickers.bad())
        return

    msg.edit_text(text=MESSAGES.Sub.SUBBED)


def unsub(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫ –∫–æ–º–∞–Ω–¥–µ /start)"""

    user_id = update.message.from_user.id
    username = update.message.from_user.username

    # –î–ª–∏–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, —Å–æ–æ–±—â–∏–º –æ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ.
    msg = update.message.reply_text(text=MESSAGES.Unsub.START)

    # LOG.info(f"Unsubcripting {user_id}")

    try:
        req = requests.get(
            f"{HOST}/unsub",
            params={"tg_id": user_id},
        )
        data = req.json()
    except requests.exceptions.RequestException:
        LOG.exception("@{user_id} –≤—ã–∑–≤–∞–ª: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É Spreadsheets.")
        update.message.reply_sticker(MESSAGES.Stickers.DEAD)
        return

    if req.status_code != 200:
        LOG.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} {data}")
        err = data.get("error", "")
        update.message.reply_text(text=MESSAGES.Unsub.failure(err))
        update.message.reply_sticker(MESSAGES.Stickers.bad())
        return

    msg.edit_text(text=MESSAGES.Unsub.UNSUBBED)


# ======================================================================= SCHED


def grades_checker(context: CallbackContext):
    """–ó–∞–¥–∞—á–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ü–µ–Ω–æ–∫.

    –ü—Ä–æ–±–µ–≥–∞–µ—Ç –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç
    `/grades/fingerprint`. –û—Ç–ø–µ—á–∞—Ç–æ–∫ (fingerprint) - —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
    –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫. –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫, –º–µ–Ω—è–µ—Ç—Å—è –∏ –∏—Ö —Ö–µ—à. –ë–æ—Ç —Å –∫–∞–∂–¥—ã–º
    –≤—ã–∑–æ–≤–æ–º –∑–∞–¥–∞—á–∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —ç—Ç–∏ —Ö–µ—à–∏ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ —Å–≤–µ—Ä—è–µ—Ç –∏—Ö. –ï—Å–ª–∏ –≤–¥—Ä—É–≥
    –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, —Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ü–µ–Ω–∫–∞—Ö –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã.

    –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –æ–Ω –Ω–µ –¥–∞–µ—Ç –∏–Ω—Ñ—ã –æ
    —Ç–æ–º, –≤ –∫–∞–∫–æ–º –∑–∞–¥–∞–Ω–∏–∏ –ø–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞.

    """

    r = requests.get(f"{HOST}/students", params={"god_mode": True, "sub_only": True})
    data = r.json()
    context.bot_data["groups"] = data

    # –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ —Å–ª–æ–≤–∞—Ä—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if "fingerprints" not in context.bot_data:
        context.bot_data["fingerprints"] = defaultdict(str)

    for group in data.values():
        for student in group["students"]:
            tg_id = student["tg_id"]
            r = requests.get(f"{HOST}/grades/fingerprint", params={"tg_id": tg_id})
            fingerprint = r.json().get("fingerprint", "")
            old_fingerprint = context.bot_data["fingerprints"][tg_id]
            # –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É —Å—Ç–∞—Ä–æ–≥–æ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ.
            # –¢–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω. –ø—Ä–æ–≤–µ—Ä–∫–∞.
            if old_fingerprint != fingerprint and old_fingerprint != "":
                context.bot.send_message(
                    chat_id=tg_id,
                    text=MESSAGES.Sub.GRADES_CHANGED,
                )
                LOG.info(
                    "Fingerprint = %s, old = %s",
                    fingerprint,
                    context.bot_data["fingerprints"][tg_id],
                )
            context.bot_data["fingerprints"][tg_id] = fingerprint


# ==================================================================== HANDLERS


def main() -> None:
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    jobber = updater.job_queue
    jobber.run_repeating(grades_checker, SUB_TIME_DELTA)
    LOG.bot = updater.bot

    start_handler = CommandHandler("start", start)

    grades_handler = ConversationHandler(
        entry_points=[CommandHandler("grades", grades_start)],
        states={
            GRADES_ASSNT: [CallbackQueryHandler(grades_pick_assignment)],
            GRADES_VIEW: [CallbackQueryHandler(grades_view)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    broadcast_handler = ConversationHandler(
        entry_points=[CommandHandler("broadcast", broadcast)],
        states={
            BROADCAST_MESSAGE: [MessageHandler(Filters.text, publish_message)],
            BROADCAST_PUBLISH_DONE: [MessageHandler(Filters.text, publish_done)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    sub_handler = CommandHandler("sub", sub)
    unsub_handler = CommandHandler("unsub", unsub)

    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(grades_handler)
    dispatcher.add_handler(broadcast_handler)
    dispatcher.add_handler(sub_handler)
    dispatcher.add_handler(unsub_handler)

    # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    updater.start_polling()


if __name__ == "__main__":
    main()
